{"version":3,"sources":["data/US_Outline.geojson","data/US_States.geojson","data/US_Counties.geojson","data/US_Congressional.geojson","components/Map/layerStyles.js","utils/languagePopup.js","components/Map/Map.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","outlineRenderer","type","size","symbol","color","stateRenderer","countiesRenderer","congressionalRenderer","statePopup","event","a","STATE","graphic","attributes","selectedStateCategories","axios","get","then","resp","arr","data","slice","map","category","estimate","label","state","selectedStateLanguages","sort","b","lang","name","code","categories","languages","join","language","ArcMap","mapRef","useRef","useEffect","loadModules","css","ArcGISMap","MapView","GeoJSONLayer","basemap","generateGeoJSONLayer","render","url","renderer","USOutline","US_Outline","USCounties","US_Counties","USCongressional","US_Congressional","USStates","US_States","outFields","popupTemplate","add","document","getElementById","onclick","visible","view","container","current","center","zoom","id","className","ref","App","Boolean","window","location","hostname","match","ReactDOM","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c8a88421.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/US_Outline.17fc7697.geojson\";","module.exports = __webpack_public_path__ + \"static/media/US_States.8ec14844.geojson\";","module.exports = __webpack_public_path__ + \"static/media/US_Counties.b20301c6.geojson\";","module.exports = __webpack_public_path__ + \"static/media/US_Congressional.a0795b65.geojson\";","// Styles for each geoJSON layer\r\nconst outlineRenderer = {\r\n    type: \"simple\",\r\n    size: 3,\r\n    symbol: {\r\n        type: \"simple-line\",\r\n        color: 'rgba(43, 45, 66, 0.9)'\r\n    },\r\n}\r\n\r\nconst stateRenderer = {\r\n    type: \"simple\",\r\n    size: 4,\r\n    symbol: {\r\n        type: \"simple-fill\",\r\n        color:\r\n            'rgba(141,153,174,0.4 )'\r\n    },\r\n}\r\n\r\nconst countiesRenderer = {\r\n    type: \"simple\",\r\n    size: 1,\r\n    symbol: {\r\n        type: \"simple-line\",\r\n        color:\r\n            'rgba(239,35,60, 0.3)'\r\n    },\r\n}\r\n\r\nconst congressionalRenderer = {\r\n    type: \"simple\",\r\n    size: 4,\r\n    symbol: {\r\n        type: \"simple-line\",\r\n        color:\r\n            'rgba(0,0,102, 0.7)'\r\n    },\r\n}\r\n\r\n\r\nexport {\r\n    outlineRenderer,\r\n    stateRenderer,\r\n    congressionalRenderer,\r\n    countiesRenderer,\r\n}","// Packages\r\nimport axios from 'axios';\r\n\r\n// Creating the popup whenver someone click a state\r\nconst statePopup = {\r\n\r\n    \"id\": \"{STATE}\",\r\n    \"title\": \"{NAME}\",\r\n    \"content\": async function (event) {\r\n        const { STATE } = event.graphic.attributes;\r\n\r\n        /**\r\n         * Retrieves data for selected state - returns object with language categories by state [estimate, label, state]\r\n         * Return is of type promise \r\n         */\r\n        const selectedStateCategories = axios.get(`https://api.census.gov/data/2013/language?get=EST,LANLABEL,NAME&for=state:${STATE}&LAN7`)\r\n            .then(resp => {\r\n                const arr = resp.data.slice(1);\r\n\r\n                if (arr) {\r\n                    return arr.map(category => ({\r\n                        estimate: category[0],\r\n                        label: category[1],\r\n                        state: category[2],\r\n                    }))\r\n                }\r\n            });\r\n\r\n        // use selectedState as a promise (returns all language categories)\r\n        const selectedStateLanguages = axios.get(`https://api.census.gov/data/2013/language?get=EST,LANLABEL,NAME&for=state:${STATE}&LAN`)\r\n            .then(resp => {\r\n                const data = resp.data.slice(1);\r\n                if (data) {\r\n                    return data\r\n                        .sort((a, b, ) => b[0] - a[0])\r\n                        .slice(0, 6)\r\n                        .map(lang => ({\r\n                            estimate: lang[0],\r\n                            name: lang[1],\r\n                            code: lang[3]\r\n                        }));\r\n                }\r\n            });\r\n        // Getting all the promised back so we can display them\r\n        const categories = await selectedStateCategories;\r\n        const languages = await selectedStateLanguages;\r\n\r\n        if (categories && languages) {\r\n            // Return html to popup to be displayed\r\n            return \"<p align='left'><strong>Language Categories</strong> </br>\" +\r\n                categories.map(category => `<strong>${category.label}: </strong> ${category.estimate} </br> `).join(\"\") + \"</p>\" +\r\n                \"<p align='left'><strong>Top Spoken Languages (excluding English) </strong> </br>\" +\r\n                languages.map(language => `<strong>${language.name}: </strong> ${language.estimate} </br> `).join(\"\") + \"</p>\"\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default statePopup;","import React, { useEffect, useRef } from 'react';\n\n// ArcGIS Layers\nimport { loadModules } from 'esri-loader';\n\nimport './Map.css';\n// Json Data\nimport US_Outline from '../../data/US_Outline.geojson';\nimport US_States from '../../data/US_States.geojson';\nimport US_Counties from '../../data/US_Counties.geojson';\nimport US_Congressional from '../../data/US_Congressional.geojson';\n\n// Layer styling\nimport { outlineRenderer, stateRenderer, congressionalRenderer, countiesRenderer, } from './layerStyles';\n\n// utili to populated the popup\nimport statePopup from '../../utils/languagePopup'\n\n\nconst ArcMap = () => {\n  const mapRef = useRef();\n\n  useEffect(() => {\n    // lazy load the required ArcGIS API for JavaScript modules and CSS\n\n    loadModules(\n      [\n        'esri/Map',\n        'esri/views/MapView',\n        'esri/layers/GeoJSONLayer',\n      ],\n      { css: true }\n    ).then(([ArcGISMap, MapView, GeoJSONLayer]) => {\n\n      // choosing the map style we want\n      const map = new ArcGISMap({\n        basemap: 'gray-vector'\n      });\n\n      // Creating the geoJson layers\n      const generateGeoJSONLayer = (data, render) => {\n        return new GeoJSONLayer({\n          url: data,\n          renderer: render\n        });\n      }\n\n      const USOutline = generateGeoJSONLayer(US_Outline, outlineRenderer);\n      const USCounties = generateGeoJSONLayer(US_Counties, countiesRenderer)\n      const USCongressional = generateGeoJSONLayer(US_Congressional, congressionalRenderer);\n\n      const USStates = new GeoJSONLayer({\n        url: US_States,\n        renderer: stateRenderer,\n        outFields: ['NAME', 'STATE'],\n        popupTemplate: statePopup\n      });\n\n      // Adding the GeoJson Layer to the map\n      map.add(USCongressional);\n      map.add(USStates);\n      map.add(USCounties);\n      map.add(USOutline);\n\n      // On click for putting on and taking out the layers\n      document.getElementById('outline').onclick = () => USOutline.visible = !USOutline.visible;\n      document.getElementById('states').onclick = () => USStates.visible = !USStates.visible;\n      document.getElementById('counties').onclick = () => USCounties.visible = !USCounties.visible;\n      document.getElementById('congressional').onclick = () => USCongressional.visible = !USCongressional.visible;\n\n      // adds the layer to the map\n      // load the map view at the ref's DOM node\n\n      const view = new MapView({\n        container: mapRef.current,\n        map: map,\n        center: [-95, 40],\n        zoom: 2\n      });\n\n      return () => {\n        if (view) {\n          // destroy the map view\n          view.container = null;\n        }\n      };\n    });\n\n  });\n  return (\n    <div>\n      <h2>U.S 2013 Census Map</h2>\n      <p>Click on States to show US Census Langugage Info</p>\n      <button id=\"outline\">Toggle US OutLine</button>\n      <button id=\"states\">Toggle US States</button>\n      <button id=\"counties\">Toggle US Counties</button>\n      <button id=\"congressional\">Toggle US congressional</button>\n      <div className=\"webmap\" ref={mapRef} />\n    </div>\n  )\n}\nexport default ArcMap;\n","import React from 'react';\nimport './App.css';\nimport Map from './components/Map/Map'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Map />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}